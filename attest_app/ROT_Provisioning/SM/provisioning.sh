#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

error_config()
{
  printf "${RED}"
  echo
  echo "====="
  if [ -z $1 ]; then
  echo "===== Error occurred."
  else
  echo "===== Error occurred. ($1)"
  fi
  echo "===== See $current_log_file for details. Then try regression.sh."
  echo "====="
  if [ "$script_mode" != "AUTO" ]; then $SHELL; fi
  exit 1
}

success_config()
{
  printf "${GREEN}"
  echo "       Successful installation"
  echo
  # ============================================================= End functions ===================================================
  # All the steps were executed correctly
  echo "====="
  echo "===== The board is correctly configured with ST Secure Manager Package"
  echo "====="
  printf "${NO}"
  if [ "$script_mode" != "AUTO" ]; then $SHELL; fi
  exit 0
}

execute_provisionning()
{
  echo "====="
  echo "===== Product state must be Open. Execute  \ROT_Provisioning\DA\regression.sh if not the case."
  echo "====="
}

install_cube()
{
  echo "Please get latest version of STM32CubeProgrammer from st.com." |tee -a $current_log_file
  error_config "env"
}

install_package()
{
  echo "Please get STM32H5 Secure Manager package from st.com." |tee -a $current_log_file
  error_config
}

# read and return the setting value of the motif $1 in the $2 batch file
read_batfile()
{
  local binary=$(grep '=' $2|sed 's/^\s*set \s*'"$1"'\s*\=\s*\(.*\)*$/\1/g'|grep -v '=')
  if [[ ! -e "$2" ]]; then
    install_package
  fi
  if [[ -z $binary ]]; then
    echo "$1 does not exist." >> $current_log_file
    install_package
  else
    echo "$binary"|sed -e 's/[[:blank:]]*$//' | tr -d '\r'
  fi
}

# Error when script is executed
error_install()
{
  "$stm32programmercli" $connect -hardRst >> $current_log_file
  error_config
}

absolutpath() {
  echo "$(cd "$(dirname "$1")" && pwd)"
}

##########################
#  provisionning.sh
##########################
# Environment variables for log files
thispath=$(absolutpath $0)
script_mode=$1

# Getting the Trusted Package Creator and STM32CubeProgammer CLI path
if [[ -z $stm32programmercli ]] || [[ -z $stm32tpccli ]] || [[ -z $cube_fw_path ]] || [[ -z $projectdir ]]; then
  if [ -e "$thispath/../env.sh" ]; then
    source $thispath/../env.sh
  else
    echo "env.sh missing"
    install_package
  fi
fi
current_log_file=$projectdir/"SM/provisioning.log"
echo "Generated by sh"> $current_log_file


if [[ -z $stm32programmercli ]] || [[ -z $stm32tpccli ]] || [[ -z $cube_fw_path ]]; then
  install_package
fi
if [[ -z $xml_config_keys ]]; then
  xml_config_keys="$projectdir/SM/Config/SM_Config_Keys.xml"
fi

if [[ -z $xml_config_other ]]; then
  xml_config_other="$projectdir/SM/Config/SM_Config_Other.xml"
fi

if [[ -z $xml_config_gen ]]; then
  xml_config_gen="$projectdir/SM/Config/SM_Config_General.xml"
fi

if [[ ! -e $xml_config_gen ]] || [[ ! -e $xml_config_keys ]] ||  [[ ! -e $xml_config_other ]]; then
  echo "file not found">> $current_log_file
  install_package
fi

# Environment variable for AppliCfg
unset AppliCfg
applicfg_path="$cube_fw_path/Utilities/PC_Software/ROT_AppliConfig/"
uname | grep -i -e windows -e mingw
if [ $? == 0 ]; then
  #line for window executable
  if [ -e "$applicfg_path/dist/AppliCfg.exe" ]; then
    echo AppliCfg with windows executable
    AppliCfg="$applicfg_path/dist/AppliCfg.exe"
  fi
fi
if [[ -z $AppliCfg ]]; then
  #determine/check python version command
  if [ -e "$applicfg_path/AppliCfg.py" ]; then
    echo AppliCfg with python script
    [ ${-/x} != ${-} ] && AppliCfg="python3 -t $applicfg_path/AppliCfg.py" || AppliCfg="python3 $applicfg_path/AppliCfg.py"
  else
    echo "AppliCfg missing">>$current_log_file
    install_cube
  fi
fi

# Environment variables for CubeProg
vb=1
connect_ur="-c port=SWD ap=1 mode=UR -vb $vb"
connect="-c port=SWD ap=1 mode=HotPlug -vb $vb"
connect_reset="-c port=SWD speed=fast ap=1 mode=Hotplug -hardRst -vb $vb"
connect_uart="-c port=$com_port br=921600"
erase_all="-e all"

# Initial configuration
echo "====="
echo "===== Provisioning of Secure Manager Package"
echo "====="

# Environment variables for secure manager package versions, ssfi_binary or rse_binary
binary_path="$projectdir/SM/Binary"
ssfi_binary_name=$(read_batfile "ssfi\_binary" "$binary_path/version.bat") #ssfi\ \ is for the motif

echo "=====     SSFI version: $ssfi_binary_name"

uname | grep -i -e windows -e mingw
if [ $? == 0 ]; then
  rsse_path="`dirname "$stm32programmercli"`/RSSe/H5"
else
  rsse_path=$stm32programmercli_path/RSSe/H5
fi

if [[ -e "$binary_path/$ssfi_binary_name" ]]; then
  ssfi_binary_file="$binary_path/$ssfi_binary_name"
else
  echo "$ssfi_binary does not exist in $binary_path or $rsse_path." >> $current_log_file
  install_cube
fi
rsse_binary_name=$(read_batfile "rsse\_binary" "$binary_path/version.bat")

echo "=====     RSSe SFI version: $rsse_binary_name"

if [ -e "$rsse_path/$rsse_binary_name" ]; then
  execute_provisionning
elif [ -e "$projectdir/SM/ST/$rsse_binary_name" ]; then
  rsse_path="$projectdir/SM/ST"
  execute_provisionning
else
  echo "RSSe file missing"
    install_cube
fi

license_sfi="$projectdir/SM/Keys/SFI_Global_License.bin"

# ====================================================== STM32H5 product preparation =============================================
# =============================================== Steps to create the SM_Config_General.obk file ===============================
echo "Step 1 : Configuration"
echo
echo "   * General configuration:"
echo "       From TrustedPackageCreator (OBkey tab in Security panel)"
echo "       Select $xml_config_gen"
echo "       Update the configuration (if/as needed) then generate SM_Config_General.obk file"
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

echo "       Processing OBKey file..."

"$stm32tpccli" "-obk" "$xml_config_gen" >> $current_log_file
if [ $? -ne 0 ]; then error_config 'CG'; fi
echo "       Successful SM_Config_General.obk file generation"
# =============================================== Steps to create the SM_Config_Keys.obk file ==================================
echo
echo "   * OEM Keys configuration:"
echo "       From TrustedPackageCreator (OBkey tab in Security panel)"
echo "       Select $xml_config_keys"
echo "       Update the configuration (if/as needed) then generate OBkey file"
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi
echo "       Processing OBKey file..."

"$stm32tpccli" "-obk" "$xml_config_keys" >> $current_log_file
if [ $? -ne 0 ]; then error_config 'CK'; fi
"$stm32tpccli" "-pb" "$projectdir/SM/ST/SM_ST_Settings_1.xml" >> $current_log_file
if [ $? -ne 0 ]; then error_config 'CK1'; fi
"$stm32tpccli" "-obk" "$projectdir/SM/ST/SM_ST_Settings_2.xml" >> $current_log_file
if [ $? -ne 0 ]; then error_config 'CK2'; fi
echo "       Successful SM_Config_Keys.obk file generation"

# =============================================== Steps to create the SL_Config_other.obk file =========================================
echo
echo "   * Other configuration :"
echo "       From TrustedPackageCreator (OBkey tab in Security panel)"
echo "       Select $xml_config_other"
echo "       Update the configuration (if/as needed) then generate SM_Config_Other.obk file"
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi
"$stm32tpccli" "-obk" "$xml_config_other" >> $current_log_file
if [ $? -ne 0 ]; then error_config 'SL'; fi
echo "       Successful SM_Config_Keys.obk file generation"

# =============================================== Steps to create the DA_Config.obk file =========================================
echo
echo "   * DA certificate configuration:"
echo "       Warning: Default keys must NOT be used in a product. Make sure to regenerate your own keys!"
echo "       From TrustedPackageCreator (Debug Authentication > Certificate Generation tab in Security panel),"
echo "       update the keys(s) (in \ROT_Provisioning\DA\Keys) and permissions (if/as needed)"
echo "       then regenerate the certificate(s)"
echo "       From TrustedPackageCreator (OBkey tab in Security panel),"
echo "       Select DA_Config.xml (in \ROT_Provisioning\DA\Config)"
echo "       Update the configuration (if/as needed) then generate DA_Config.obk file"
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

# =============================================== Steps to create the Option_Bytes.csv file ======================================
echo
echo "   * Option Bytes configuration:"
echo "       From TrustedPackageCreator (SFI Option Bytes tab in Security panel)"
echo "       Select STM32H5xx, then Open Option Bytes file (Default path is /ROT_Provisioning/SM/Config/Option_Bytes.csv)"
echo "       Update the configuration (if/as needed) then generate Option_Bytes.csv file"
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

# =============================================== Steps to create the FITS file ======================================
echo
echo "   * Factory ITS blob preparation:"
echo "       Personalize (if/as needed) ITS blob content (in \ROT_Provisioning\its_blob.bat)"
echo "       then regenerate the blob (ROT_Provisioning\SM\Binary\ITS_Factory_Blob.bin) by running its_blob script."
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

# =============================================== Steps to create the SFI license file ============================================
echo
echo "   * SFI global license configuration:"
echo "       From TrustedPackageCreator (License Gen tab in Security panel)"
echo "       Select SFIG in the License Type list"
echo "       Open encryption key file (\ROT_Provisioning\SM\Keys\SFI_Encryption_Key.bin)"
echo "       and nonce file (\ROT_Provisioning\SM\Keys\SFI_Encryption_Nonce.bin),"
echo "       then regenerate them (if/as needed) with same name."
echo "       Select Output license file (\ROT_Provisioning\SM\Keys\SFI_Global_License.bin)"
echo "       then Generate License (if/as needed) with same name."
echo "       Press any key to continue..."
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

# =============================================== Step to process flash layout ====================================================
echo
echo "   * Flash layout processing"
echo "       Processing..."

# Flash layout files
flash_layout_bin="$projectdir/SM/Binary/FlashLayoutConfigs.bin"
module_template_xml="$projectdir/SM/Images/SM_Module_Image_template.xml"

# Checking the consistency of the NS Reserved Area

# Update the "NS appli size" before the calcul with the optional NS Reserved Area
$AppliCfg xmlval -b $flash_layout_bin -b_el_idx 30 -nxml_el_idx "Flash Layout configuration index" -n "NS appli size" $xml_config_gen --vb >> $current_log_file
if [ $? -ne 0 ]; then error_config 30; fi

# Retrieve the sizes of the non-secure application and the desired non-secure reserved area
ns_appli_size_str=$(./Helper/read_xml.sh $xml_config_gen "NS appli size" "Data")
ns_reserved_area_size_str=$(./Helper/read_xml.sh $xml_config_gen "NS reserved area size" "List")

ns_appli_size=$(printf "%d" $ns_appli_size_str)
ns_reserved_area_size=$(printf "%d" $ns_reserved_area_size_str)

# Half of ns reserved area is subtracted from the non-secure application
reserved_area_primary_slot=$((ns_reserved_area_size/2))

if [ "$ns_appli_size" -lt "$reserved_area_primary_slot" ]; then
    echo "Reserved area is larger than non-secure application" >> $current_log_file
    error_config "Reserved area"
fi

# Get effective flash layout
sh Helper/update_config.sh >> $current_log_file
if [ $? -ne 0 ]; then error_config; fi


# TPC xml sections to configure
fw_size="Firmware area Size"
rom_fixed="Rom fixed"
fw_dwl_offset="Firmware download area offset"
fw_in_bin="Binary input file"
fw_out_bin="Image output file"

# Get nb of modules
nb_modules_string=$(./Helper/read_xml.sh $xml_config_gen "Nb Secure Modules" "Data")
nb_modules=$(printf "%d" $nb_modules_string)

# Variable containing list of modules to put in SFI file
modules=""
use_mcsv_file=false

# Generate dummy modules
dummy_bin="$projectdir/SM/Binary/dummy.bin"
if [ ! -f  $dummy_bin ]; then
  dd if=/dev/zero of=$dummy_bin bs=1 count=0 seek=1 >> $current_log_file 2>&1
fi

for i in $(seq 1 1 $nb_modules)
do
  id=$((i-1))
  module_xml="$projectdir/SM/Images/SM_Module_${id}_Image.xml"
  code_offset="S Module $id primary offset"
  code_dwl_offset="S Module $id secondary offset"
  code_size="S Module $id size"
  image_hex="/Binary/Module_${id}.hex"
  cp -rf $module_template_xml $module_xml >> $current_log_file
  $AppliCfg xmlval -xml $xml_config_gen -nxml "$code_size" -n "$fw_size" -e "val1*0x2000" $module_xml --vb >> $current_log_file
  if [ $? -ne 0 ]; then error_config; fi
  $AppliCfg xmlval -xml $xml_config_gen -nxml "$code_offset" -n "$rom_fixed" -e "(val1*0x2000)+0xC000000" $module_xml --vb >> $current_log_file
  if [ $? -ne 0 ]; then error_config; fi
  $AppliCfg xmlval -xml $xml_config_gen -nxml "$code_dwl_offset" -n "$fw_dwl_offset" -e "(val1*0x2000)+0x8000000" $module_xml --vb >> $current_log_file
  if [ $? -ne 0 ]; then error_config; fi
  $AppliCfg xmlval -v "$projectdir/SM/$image_hex" --string -n "$fw_out_bin" $module_xml --vb >> $current_log_file
  if [ $? -ne 0 ]; then error_config; fi
  "$stm32tpccli" -pb $module_xml >> $current_log_file
  if [ $? -ne 0 ]; then error_config; fi
  # Concatenate firmware image versions
  modules="$modules --firmware $projectdir/SM/$image_hex"
done

# ================================================ Secure installation RSSe SFI =================================================
installation()
{
echo
echo "Step 2 : Installation"
echo
echo "   * BOOT0 pin should be disconnected from VDD"
echo "       (STM32H573I-DK: SW1 to position 0)"
echo "       Press any key to continue..."
echo
if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

echo "   * Secure installation"
"$stm32programmercli" $connect_ur  $erase_all>> $current_log_file
if [ $? -ne 0 ]; then
  echo $stm32programmercli $connect_ur  $erase_all
  echo "Error, try regression before provisionning."
  error_install 'c'
fi
"$stm32programmercli" $connect_ur -hardRst >> $current_log_file
"$stm32programmercli" $connect_ur -hardRst >> $current_log_file
echo "       Installation starting (might take up to 15 seconds)..."

if $use_mcsv_file; then
  "$stm32programmercli" $connect -sfi $binary_path/SecureManagerPackage.sfi $license_sfi $rsse $modules>> $current_log_file
  if [ $? -ne 0 ]; then error_install 'prog'; fi
else
  "$stm32programmercli" $connect -sfi $binary_path/SecureManagerPackage.sfi $license_sfi $rsse>> $current_log_file
  if [ $? -ne 0 ]; then error_install 'prog_mcsv'; fi
fi

# Wait end of installation ...
echo        Installation completion...
sleep 3s

# ============================================================= End functions ===================================================
# All the steps were executed correctly
success_config
}
# =============================================== Step to generate SFI ============================================================
generate_sfi()
{
echo
echo "   * SFI file generation"
echo "       Processing..."

# Generate Factory ITS blob image
its_xml="$projectdir/SM/Images/SM_ITS.xml"
its_factory_offset="ITS offset"
its_factory_dwl_offset="ITS Factory offset"
its_factory_size="ITS Factory size"
its_factory="--firmware $projectdir/SM/Binary/ITS_Factory.hex"
$AppliCfg xmlval -xml $xml_config_gen -nxml "$its_factory_size" -n "$fw_size" -e "val1*0x2000" $its_xml --vb >>$current_log_file
if [ $? -ne 0 ]; then error_config 'its1'; fi
$AppliCfg xmlval -xml $xml_config_gen -nxml "$its_factory_offset" -n "$rom_fixed" -e "(val1*0x2000)+0xC000000" $its_xml --vb >> $current_log_file
if [ $? -ne 0 ]; then error_config 'its2'; fi
$AppliCfg xmlval -xml $xml_config_gen -nxml "$its_factory_dwl_offset" -n "$fw_dwl_offset" -e "(val1*0x2000)+0x8000000" $its_xml --vb >> $current_log_file
if [ $? -ne 0 ]; then error_config 'its3'; fi
"$stm32tpccli" -pb $its_xml >> $current_log_file
if [ $? -ne 0 ]; then error_config 'TC its'; fi

# Generate SFI file
device="--deviceid 0x484"
key="--key $projectdir/SM/Keys/SFI_Encryption_Key.bin"
appli_valid="--firmware $binary_path/appli_${nb_modules}.hex"
opn=-"-nonce $projectdir/SM/Keys/SFI_Encryption_Nonce.bin"
ob="--obfile $projectdir/SM/Config/Option_Bytes.csv"
obk="--ob-keys $projectdir/DA/Binary/DA_Config.obk $projectdir/SM/Binary/SM_Config_Keys.obk $projectdir/SM/Binary/SM_Config_General.obk $projectdir/SM/Binary/SM_Config_Other.obk"
rsse="-rsse $rsse_path/$rsse_binary_name"
ver="--ver 0"
ramsize="--ramsize 0x20800"
hash="--hash 1"
out="--outfile $binary_path/SecureManagerPackage.sfi"
"$stm32tpccli" -sfi $device $modules $appli_valid $its_factory $key $opn $ob $obk -ssfi $ssfi_binary_file $ver $ramsize $hash $out >> $current_log_file
if [ $? -ne 0 ]; then error_config 'SFI'; fi

echo
echo "       Successful SFI file generation"

installation
}
# =============================================== Step to provision a module with license =========================================
auth_module_with_license()
{
  # Retrieve the type of Authentication for the module with license
  auth_module_with_license=$(./Helper/read_xml.sh $xml_config_gen "Authentication of Modules with license" "List")

  if [ "$auth_module_with_license" = "$module_with_license_not_oem_sign" ]; then
    echo
    echo "       In accordance with SM_Config_General.xml, module with license shall not be signed by OEM"
    output_module="$not_oem_sign_module"
  fi

  if [ "$auth_module_with_license" = "$module_with_license_is_oem_sign" ]; then
    echo
    echo "       In accordance with SM_Config_General.xml, module with license shall be signed by OEM"
    echo "       The XML file $module_with_license_template_ota_oem_sign_xml"
    echo "       is available to re-sign a module for the Firmware Update use case (OTA\)"
    output_module="$not_oem_sign_module"

    cp -rf $module_with_license_template_oem_sign_xml $module_0_with_license_oem_sign_xml >> $current_log_file

    if [ "$module_license" = "global" ]; then output_module="$config_1_module_0_smug_oem_sign"; fi
    if [ "$module_license" = "chip_specific" ]; then output_module="$config_1_module_0_smucs_oem_sign"; fi

    $AppliCfg xmlval -xml $xml_config_gen -nxml "S Module 0 size" -n "$fw_size" -e "val1*0x2000" $module_0_with_license_oem_sign_xml --vb >> $current_log_file
    if [ $? -ne 0 ]; then error_config; fi
    $AppliCfg xmlval -v "./../Binary/$not_oem_sign_module" --string -n "$fw_in_bin" $module_0_with_license_oem_sign_xml --vb >> $current_log_file
    if [ $? -ne 0 ]; then error_config; fi
    $AppliCfg xmlval -v "./../Binary/$output_module" --string -n "$fw_out_bin" $module_0_with_license_oem_sign_xml --vb >> $current_log_file
    if [ $? -ne 0 ]; then error_config; fi
    "$stm32tpccli" -pb $module_0_with_license_oem_sign_xml >> $current_log_file
    if [ $? -ne 0 ]; then error_config; fi
  fi

  offset=$(./Helper/read_xml.sh $xml_config_gen "S Module 0 secondary offset" "Data")
  module_dwl_offset=$(((offset * 0x2000) + 0x8000000))
  destination_address=$(printf "0x%X" $module_dwl_offset)

  # Complete MCSV file
  if [ "$module_license" = "global" ]; then
    echo "./../Binary/$output_module, ./$module_global_license_file, $destination_address" >> "$mcsv_file"
  fi
  if [ "$module_license" = "chip_specific" ]; then
    echo "./../Binary/$output_module, $firmware_id, $destination_address" >> "$mcsv_file"
  fi

  echo
  echo "       Successful MCV file generation"

  modules="-mcsv $mcsv_file"
  use_mcsv_file=true

  generate_sfi
}

global_license()
{
  echo
  echo "       You want to install a module with global license"
  echo "       To do this, you must copy the global license supplied with your module into"
  echo "       /ROT_Provisioning/SM/License/SMUG_Global_License_config_1_module_0.bin with this naming"
  echo "       and the module in /ROT_Provisioning/SM/Binary/$config_1_module_0_smug_not_oem_sign"
  echo "       with this naming too."
  echo "       Press any key to continue..."
  if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

  module_license="global"
  not_oem_sign_module="$config_1_module_0_smug_not_oem_sign"
  auth_module_with_license
}

chip_specific_license()
{
  echo
  echo "       You want to install a module with chip specific license"
  echo "       To do this, you must insert the STM32HSM-V2* into your HSM reader"
  echo "       and copy the module in /ROT_Provisioning/SM/Binary/"
  echo "       with the naming $config_1_module_0_smucs_not_oem_sign"
  echo "       Press any key to continue..."
  if [ "$script_mode" != "AUTO" ]; then read -p "" -n1 -s; fi

  # Check that there is no error reading the HSM
  "$stm32programmercli" -hsmgetinfo >> $current_log_file
  if [ $? -ne 0 ]; then error_config 'HSM'; fi

  # Retrieve the FW ID of the HSM
  firmware_id=$(("$stm32programmercli" -hsmgetinfo) | grep "HSM FW IDENTIFIER" | sed -n 's/.*: //p')

  module_license="chip_specific"
  not_oem_sign_module="$config_1_module_0_smucs_not_oem_sign"
  auth_module_with_license
}

define_type_of_license()
{
  echo "       Select the type of module you want to install"
  read -p "       [ '1' for module without license | '2' for module with global license | '3' for module with chip specific license ]: " choice_license

  if [ "${choice_license,,}" = "1" ]; then generate_sfi; fi
  if [ "${choice_license,,}" = "2" ]; then global_license; fi
  if [ "${choice_license,,}" = "3" ]; then chip_specific_license; fi

  echo
  echo "       WRONG choice of license selected"
  echo
  define_type_of_license
}

if [ $nb_modules -eq 0 ]; then
  generate_sfi
fi

module_with_license_template_oem_sign_xml="$projectdir/SM/License/SM_Module_Image_with_License_template_oem_sign.xml"
module_with_license_template_ota_oem_sign_xml="License/SM_Module_Image_with_License_template_ota_oem_sign.xml"
module_0_with_license_oem_sign_xml="$projectdir/SM/License/SM_Module_0_Image_with_License_oem_sign.xml"
module_global_license_file="SMUG_Global_License_config_1_module_0.bin"

mcsv_file="$projectdir/SM/License/modules.mcsv"
module_with_license_not_oem_sign="0xbd"
module_with_license_is_oem_sign="0xce"

config_1_module_0_smug_not_oem_sign="config_1_module_0_with_global_license_not_oem_sign.smu"
config_1_module_0_smucs_not_oem_sign="config_1_module_0_with_chip_specific_license_not_oem_sign.smu"
config_1_module_0_smug_oem_sign="config_1_module_0_with_global_license_oem_sign.smu"
config_1_module_0_smucs_oem_sign="config_1_module_0_with_chip_specific_license_oem_sign.smu"

echo "# Module path, LicensePath.bin or HSM FW ID, DestinationAddress" > $mcsv_file
echo "# This file is updated automatically by provisioning script" >> $mcsv_file

echo
echo "   * Module with license:"

define_type_of_license
