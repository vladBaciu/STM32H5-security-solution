#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

error_config()
{
  printf "${RED}"
  echo
  echo "====="
  if [ -z $1 ]; then
  echo "===== Error occurred."
  else
  echo "===== Error occurred. ($1)"
  fi
  echo "===== See $current_log_file for details. Then try regression.sh."
  echo "=====$NC"
  if [ "$script_mode" != "AUTO" ]; then $SHELL>/dev/null; fi #keep windows open
  exit 1
}

success_config()
{
  printf "${GREEN}"
  echo
  # ============================================================= End functions ===================================================
  # All the steps were executed correctly
  echo "====="
  echo "===== ITS blob generation successful"
  echo "====="
  printf "${NC}"
  if [ "$mode" != "AUTO" ]; then $SHELL>/dev/null; fi #keep windows open
  exit 0
}

install_cube()
{
  echo "Please get latest version of STM32CubeProgrammer from st.com." |tee -a $current_log_file
  error_config "env"
}

absolutpath() {
  echo "$(cd "$(dirname "$1")" && pwd)"
}
##########################
#  its_blob.sh
##########################
# Environment variables for log files
thispath=$(absolutpath $0)
mode=$1

# Getting the Trusted Package Creator and STM32CubeProgammer CLI path
if  [[ -z $cube_fw_path ]] || [[ -z $projectdir ]]; then
  if [ -e "$thispath/../env.sh" ]; then
    source $thispath/../env.sh
  else
    echo "env.sh missing"
    install_package
  fi
fi
current_log_file=$projectdir/SM/"its_blob.log"
echo "Generated by sh"> $current_log_file

# Environment variable for ITSbuilder
unset ITSbuilder
itsbuilder_path="$cube_fw_path/Utilities/PC_Software/ITSbuilder"
uname | grep -i -e windows -e mingw
if [ $? == 0 ]; then
  #line for window executable
  if [ -e "$itsbuilder_path/dist/ITSbuilder/ITSbuilder.exe" ]; then
    echo ITSbuilder with windows executable
    ITSbuilder="$itsbuilder_path/dist/ITSbuilder/ITSbuilder.exe"
  fi
fi
if [[ -z $ITSbuilder ]]; then
  if [ -e "$itsbuilder_path/ITSbuilder.py" ]; then
    #determine/check python version command
    echo ITSbuilder with python script
    [ ${-/x} != ${-} ] && ITSbuilder="python -t $itsbuilder_path/ITSbuilder.py" || ITSbuilder="python $itsbuilder_path/ITSbuilder.py"
  else
    echo "ITSbuilder missing">>$current_log_file
    install_cube
  fi
fi


#ITS blob file
blob=$projectdir/SM/Binary/ITS_Factory_Blob.bin

#Owner of the data (NonSecure: 0xffffffff, Secure module: ASID of the module)
owner=0xffffffff

#============================================= ITS blob preparation (example) ===================================================
#ID of the data (0x40 is the data ID used by SMAK_Appli example)
id=0x40
id_key=0x45

#Flags of the data (WRITE_ONCE for not modifiable / not erasable data)
flag=WRITE_ONCE

#Val of the data
data1=$projectdir/SM/Binary/ITS_data1.bin
key1=$projectdir/SM/Keys/ITS_key1.pem

#Create empty blob
$ITSbuilder createblob -v 1 $blob 2> $current_log_file
if [ $? -ne 0 ]; then error_config 'createblob'; fi

#Add data to blob
$ITSbuilder adddata2blob $blob $blob -i $id -o $owner -p $flag -a $data1 >> $current_log_file
if [ $? -ne 0 ]; then error_config 'adddata2blob'; fi

# Add key to blob
$ITSbuilder addkey2blob $blob $blob -i $id_key -m "EC PRIVATE KEY" -o $owner --keytype=SECP_R1 -s ANY -b 256 -k $key1 -u SIGN -u SIGN_HASH --format=PEM >> $current_log_file
if [ $? -ne 0 ]; then error_config 'addkey2blob'; fi


#Parse blob
$ITSbuilder infoblob $blob - >> $current_log_file
if [ $? -ne 0 ]; then error_config 'infoblob'; fi

success_config
